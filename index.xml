<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Emmett Woo&#39;s Blog</title>
    <link>https://blog.woohoo.top/</link>
    
    <atom:link href="https://blog.woohoo.top/index.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 24 Jan 2021 06:41:10 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Java8 Optional类初体验</title>
      <link>https://blog.woohoo.top/2021/01/About-Java8-Optional-First-Experience/</link>
      <guid>https://blog.woohoo.top/2021/01/About-Java8-Optional-First-Experience/</guid>
      <pubDate>Sun, 24 Jan 2021 06:38:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>在现在的公司实习已经一个多月了，在每天的做任务改八哥中，要说给我印象最深，用了以后觉得最爽的一个新知识，就非Optional莫属了。（于是上班偷偷摸鱼整理了这篇文章？）</p><p>Optional是Java8引入的一个很有趣的特性，用来解决最经常遇到的烦人问题: NullPointerException（空指针异常）。本质上，Optional是一个包装类，支持泛型地将对象保存在Optional类中，并提供许多有意思的方法来调用和处理存储的对象为空时的异常。</p><p>什么？如果调用的Option对象为空？放心啦，你不会去手动new一个Optional对象的，Optional是一个final类，唯二的构造方法都是private的，你需要通过Optional.of()等static方法来获取一个新对象，所以并不会收到一个null对象哦。</p><p>接下来跟着代码一步步接近Optional，感受其中的奥秘吧。</p><h1 id="一-不使用-Optional-的情况"><a href="#一-不使用-Optional-的情况" class="headerlink" title="一. 不使用 Optional 的情况"></a>一. 不使用 Optional 的情况</h1><ol><li>常规的调用逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String isocode = user.getAddress().getCountry().getIsocode().toUpperCase();<br></code></pre></td></tr></table></figure><ol start="2"><li>常规的 null 处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123;<br>Address address = user.getAddress();<br><span class="hljs-keyword">if</span> (address != <span class="hljs-keyword">null</span>) &#123;<br>Country country = address.getCountry();<br><span class="hljs-keyword">if</span> (country != <span class="hljs-keyword">null</span>) &#123;<br>String isocode = country.getIsocode();<br><span class="hljs-keyword">if</span> (isocode != <span class="hljs-keyword">null</span>) &#123;<br>isocode = isocode.toUpperCase();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二-Optional-对象的创建"><a href="#二-Optional-对象的创建" class="headerlink" title="二. Optional 对象的创建"></a>二. Optional 对象的创建</h1><ol><li><p>empty(): 尝试访问 emptyOpt 变量的值会导致 NoSuchElementException。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;User&gt; emptyOpt = Optional.empty();<br>emptyOpt.get();<br></code></pre></td></tr></table></figure></li><li><p>of(): 如果user为空，会抛出NullPointerException。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;User&gt; opt = Optional.of(user);<br></code></pre></td></tr></table></figure></li><li><p>ofNullable(): 如果对象即可能是 null 也可能是非 null，你就应该使用 ofNullable() 方法。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;User&gt; opt = Optional.ofNullable(user);<br></code></pre></td></tr></table></figure></li></ol><h1 id="三-Optional-值的访问"><a href="#三-Optional-值的访问" class="headerlink" title="三. Optional 值的访问"></a>三. Optional 值的访问</h1><ol><li><p>get(): 如果opt为空，会抛出NullPointerException。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String name = <span class="hljs-string">&quot;John&quot;</span>;<br>Optional&lt;String&gt; opt = Optional.ofNullable(name);<br>assertEquals(<span class="hljs-string">&quot;John&quot;</span>, opt.get());<br></code></pre></td></tr></table></figure></li><li><p>isPresent(): 检查对象是否存在，null 时为 false。</p></li><li><p>ifPresent(): 只有 user 用户不为 null 的时候才会执行断言。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">opt.ifPresent( u -&gt; assertEquals(user.getEmail(), u.getEmail()));<br></code></pre></td></tr></table></figure></li></ol><h1 id="四-Optional-空值的处理"><a href="#四-Optional-空值的处理" class="headerlink" title="四. Optional 空值的处理"></a>四. Optional 空值的处理</h1><ol><li><p>orElse(): 如果user为空，返回user2，否则返回user。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">User user = <span class="hljs-keyword">null</span>;<br>User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;anna@gmail.com&quot;</span>, <span class="hljs-string">&quot;1234&quot;</span>);<br>User result = Optional.ofNullable(user).orElse(user2);<br><br>assertEquals(user2.getEmail(), result.getEmail());<br></code></pre></td></tr></table></figure></li><li><p>orElseGet(): 如果user为空，执行Supplier(供应者) 函数式接口，并将返回其执行结果。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User result = Optional.ofNullable(user).orElseGet( () -&gt; user2);<br></code></pre></td></tr></table></figure></li><li><p>orElse() 和 orElseGet() 的不同之处</p><ol><li>当对象为空而返回默认对象时，行为并无差异。</li><li>当对象非空值时，两个方法都会返回对应的非空值。不过，orElse() 方法仍然创建了 User 对象，orElseGet() 方法不创建 User 对象。</li></ol></li><li><p>orElseThrow(): 在对象为空的时候抛出异常，而不是返回备选的值。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">User result = Optional.ofNullable(user)<br>  .orElseThrow( () -&gt; <span class="hljs-keyword">new</span> IllegalArgumentException());<br></code></pre></td></tr></table></figure></li></ol><h1 id="五-Optional-值的转换和过滤"><a href="#五-Optional-值的转换和过滤" class="headerlink" title="五. Optional 值的转换和过滤"></a>五. Optional 值的转换和过滤</h1><ol><li><p>map(): 将值作为参数调用函数，然后将返回的值包装在 Optional 中。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;anna@gmail.com&quot;</span>, <span class="hljs-string">&quot;1234&quot;</span>);<br>String email = Optional.ofNullable(user)<br>  .map(u -&gt; u.getEmail()).orElse(<span class="hljs-string">&quot;default@gmail.com&quot;</span>);<br><span class="hljs-comment">// 上面map()后是 Optional 对象，所以可以链式调用orElse()。</span><br>assertEquals(email, user.getEmail());<br></code></pre></td></tr></table></figure></li><li><p>flatMap(): 过程与map()一致，但直接返回结果，而非包装为 Optional。</p></li><li><p>类方法返回 Optional 对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类的定义</span><br><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <br><span class="hljs-keyword">private</span> String position;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Optional&lt;String&gt; <span class="hljs-title">getPosition</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> Optional.ofNullable(position);<br>&#125;<br><br><span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-comment">// 调用示例</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">whenFlatMap_thenOk</span><span class="hljs-params">()</span> </span>&#123;<br>User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;anna@gmail.com&quot;</span>, <span class="hljs-string">&quot;1234&quot;</span>);<br>user.setPosition(<span class="hljs-string">&quot;Developer&quot;</span>);<br>String position = Optional.ofNullable(user)<br>  .flatMap(u -&gt; u.getPosition()).orElse(<span class="hljs-string">&quot;default&quot;</span>);<br><br>assertEquals(position, user.getPosition().get());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>filter(): 接受一个 Predicate 参数，true 返回值，false返回空 Optional。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;anna@gmail.com&quot;</span>, <span class="hljs-string">&quot;1234&quot;</span>);<br>Optional&lt;User&gt; result = Optional.ofNullable(user)<br>  .filter(u -&gt; u.getEmail() != <span class="hljs-keyword">null</span> &amp;&amp; u.getEmail().contains(<span class="hljs-string">&quot;@&quot;</span>));<br><br>assertTrue(result.isPresent());<br></code></pre></td></tr></table></figure></li></ol><h1 id="六-Optional-类的链式方法演示"><a href="#六-Optional-类的链式方法演示" class="headerlink" title="六. Optional 类的链式方法演示"></a>六. Optional 类的链式方法演示</h1><ol><li><p>嵌套类，getter返回 Optional 对象</p><p> <img src="https://blog.woohoo.top/images/About-Java8-Optional-First-Experience/About-Java8-Optional-First-Experience_001.jpg" srcset="/img/loading.gif" lazyload alt="About-Java8-Optional-First-Experience_001"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-keyword">private</span> Address address;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Optional&lt;Address&gt; <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> Optional.ofNullable(address);<br>&#125;<br><br><span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>&#123;<br><span class="hljs-keyword">private</span> Country country;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Optional&lt;Country&gt; <span class="hljs-title">getCountry</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> Optional.ofNullable(country);<br>&#125;<br><br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;anna@gmail.com&quot;</span>, <span class="hljs-string">&quot;1234&quot;</span>);<br><br><span class="hljs-comment">// 因为该自定义类返回的值本身就是 Optional 对象，所以用flatMap();</span><br>String result = Optional.ofNullable(user)<br>  .flatMap(u -&gt; u.getAddress())<br>  .flatMap(a -&gt; a.getCountry())<br>  .map(c -&gt; c.getIsocode())<br>  .orElse(<span class="hljs-string">&quot;default&quot;</span>);<br><br>assertEquals(result, <span class="hljs-string">&quot;default&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>简化测试方法（Lambda）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String result = Optional.ofNullable(user)<br>  .flatMap(User::getAddress)<br>  .flatMap(Address::getCountry)<br>  .map(Country::getIsocode)<br>  .orElse(<span class="hljs-string">&quot;default&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h1 id="七-参考来源"><a href="#七-参考来源" class="headerlink" title="七. 参考来源"></a>七. 参考来源</h1><p>更多信息以及关于Java9对Optional的增强，可以参考:</p><ul><li><a href="https://www.runoob.com/java/java8-optional-class.html">https://www.runoob.com/java/java8-optional-class.html</a></li><li><a href="https://www.jianshu.com/p/d81a5f7c9c4e">https://www.jianshu.com/p/d81a5f7c9c4e</a></li><li><a href="https://www.cnblogs.com/zhangboyu/p/7580262.html">https://www.cnblogs.com/zhangboyu/p/7580262.html</a></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://blog.woohoo.top/tags/Java/">Java</category>
      
      <category domain="https://blog.woohoo.top/tags/Backend/">Backend</category>
      
      
      <comments>https://blog.woohoo.top/2021/01/About-Java8-Optional-First-Experience/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>前端实战环境问题三记</title>
      <link>https://blog.woohoo.top/2020/03/Three-Problems-On-EMM_Mall-Portal-Env/</link>
      <guid>https://blog.woohoo.top/2020/03/Three-Problems-On-EMM_Mall-Portal-Env/</guid>
      <pubDate>Fri, 13 Mar 2020 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="零-前言"><a href="#零-前言" class="headerlink" title="零. 前言"></a>零. 前言</h1><p>本人前端白痴，因现在做的电商项目需要，跟了一个前端课程。<br>不出所料，搭建环境时就出了许多问题，因为没有前端基础解决问题时很无力。<br>遂选取了三条困扰我比较久的问题做一下记录，用于整理自己解决问题的思路罢了。</p><hr><h1 id="一-WebPack-代码分离"><a href="#一-WebPack-代码分离" class="headerlink" title="一. WebPack 代码分离"></a>一. WebPack 代码分离</h1><p>本条记录，webpack 做<a href="https://www.webpackjs.com/guides/code-splitting/">重复代码</a>的提取分离时，新旧版本和默认配置的坑点。</p><h2 id="1-1-老版本"><a href="#1-1-老版本" class="headerlink" title="1.1 老版本"></a>1.1 老版本</h2><p>因为课程使用 webpack 1.x 版本的原因，使用的代码为<br>webpack.config.js:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span> = &#123;<br>...<br>plugins: [<br><span class="hljs-keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;<br>name: <span class="hljs-string">&#x27;commons&#x27;</span>,<br>filename: <span class="hljs-string">&#x27;js/base.js&#x27;</span><br>&#125;)<br>],<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>而使用此代码在新版本 (4.x) 会出现以下的问题<br>Error: <a href="https://www.webpackjs.com/plugins/commons-chunk-plugin/">webpack.optimize.CommonsChunkPlugin</a><br>has been removed, please use <a href="https://www.webpackjs.com/plugins/split-chunks-plugin/">config.optimization.splitChunks</a> instead.</p><h2 id="1-2-新版本"><a href="#1-2-新版本" class="headerlink" title="1.2 新版本"></a>1.2 新版本</h2><p>查看报错信息，找到官方文档，根据 <a href="https://www.webpackjs.com/plugins/split-chunks-plugin/#split-chunks-example-1">demo</a> 将代码修改成：<br>webpack.config.js:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts">module.exports = &#123;<br>...<br><span class="hljs-symbol">plugins:</span> [],<br><span class="hljs-symbol">splitChunks:</span> &#123;<br><span class="hljs-symbol">cacheGroups:</span> &#123;<br><span class="hljs-symbol">commons:</span> &#123;<br><span class="hljs-symbol">name:</span> <span class="hljs-string">&quot;commons&quot;</span>,<br><span class="hljs-symbol">chunks:</span> <span class="hljs-string">&quot;initial&quot;</span>,<br><span class="hljs-symbol">minChunks:</span> <span class="hljs-number">2</span><br>&#125;<br>&#125;<br>&#125;，<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-踩坑点"><a href="#1-3-踩坑点" class="headerlink" title="1.3 踩坑点"></a>1.3 踩坑点</h2><p>根据<a href="https://blog.emmettwoo.tech/2020/03/Three-Problems-On-EMM_Mall-Portal-Env/#%E6%96%B0%E7%89%88%E6%9C%AC">新版本</a>的方法，其实问题也就解决了，但是我的 demo 怎么也没成功分离出重复代码，也没有任何报错，实在是折磨死人了。<br>后来反反复复搜索其他人的解决方案，终于发现一个问题。在官方文档中，有写到参数的<a href="https://www.webpackjs.com/plugins/split-chunks-plugin/#optimization-splitchunks">默认配置</a>，<br>其中 minSize: 30000，设置了默认分离的阈值为 30kib，若重复代码小于 30kib 则不会触发分离机制。这！谁！想！得！到。。。<br>于是自行配置 minSize 为适合的值（如下面例子中的 30），问题解决：</p><p>webpack.config.js:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts">module.exports = &#123;<br>...<br><span class="hljs-symbol">plugins:</span> [],<br><span class="hljs-symbol">splitChunks:</span> &#123;<br><span class="hljs-symbol">cacheGroups:</span> &#123;<br><span class="hljs-symbol">commons:</span> &#123;<br><span class="hljs-symbol">name:</span> <span class="hljs-string">&quot;commons&quot;</span>,<br><span class="hljs-symbol">chunks:</span> <span class="hljs-string">&quot;initial&quot;</span>,<br><span class="hljs-symbol">minChunks:</span> <span class="hljs-number">2</span>,<br><span class="hljs-symbol">minSize:</span> <span class="hljs-number">30</span><br>&#125;<br>&#125;<br>&#125;，<br>...<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="二-Fiddler-无法捕获到-localhost"><a href="#二-Fiddler-无法捕获到-localhost" class="headerlink" title="二. Fiddler 无法捕获到 localhost"></a>二. Fiddler 无法捕获到 localhost</h1><p>本条记录，Fidder 在拦截并修改请求时，遇到的问题。</p><h2 id="2-1-需求介绍"><a href="#2-1-需求介绍" class="headerlink" title="2.1 需求介绍"></a>2.1 需求介绍</h2><p>在项目中需要跨域访问某网站接口，出于开发前期考虑，决定将跨域请求修改为本地请求，再由拦截工具对请求进行转发，实现跨域操作。<br>因为课程使用 MacOS 的 Charles，可以捕获到 localhost 的活动并进行处理，而 Windows 下的 Fiddler 无法捕获 127.0.0.1 与 localhost，故出现问题。</p><h2 id="2-2-排错过程"><a href="#2-2-排错过程" class="headerlink" title="2.2 排错过程"></a>2.2 排错过程</h2><p>一开始以为是自己配置出错了，遂尝试拦截 bing.com 到 baidu.com，生效。<br><img src="https://blog.woohoo.top/images/Three-Problems-On-EMM_Mall-Portal-Env/AutoResponder4Bing2Baidu.png" srcset="/img/loading.gif" lazyload alt="AutoResponder4Bing2Baidu.png"></p><p>于是开始发现访问 localhost 时左侧的 Stream 没有捕获到，猜测不会捕获 localhost，搜索了一下果不其然。</p><p>找解决方法，了解到 Fiddler 会配置地址 ipv4.fiddler 到 localhost，且可被抓取到（该域名仅在 Fiddler 启动时生效）。<br>所以将 AutoResponder 规则中的 localhost 项改为 ipv4.fiddler，且调试过程中使用 ipv4.fiddler 代替 localhost 进行访问即可。</p><hr><h1 id="三-Nginx-转发后-sessionId-不一致"><a href="#三-Nginx-转发后-sessionId-不一致" class="headerlink" title="三. Nginx 转发后 sessionId 不一致"></a>三. Nginx 转发后 sessionId 不一致</h1><h2 id="3-1-需求介绍"><a href="#3-1-需求介绍" class="headerlink" title="3.1 需求介绍"></a>3.1 需求介绍</h2><p>因本地调试需要，在本地安装并配置 nginx，用于模拟 ftp、静态资源、后端接口、前端门户等在线服务器。<br>其实一开始直接拷贝课程配置文件没有任何问题，后来工程重建后自行修改了配置，导致出现问题。<br>该电商系统有登录功能，登录成功后将信息保存到 session 中方便状态校验，但最近发现登录成功后校验始终无法通过。</p><h2 id="3-2-排错过程"><a href="#3-2-排错过程" class="headerlink" title="3.2 排错过程"></a>3.2 排错过程</h2><p>首先考虑代码层面，代码通过 git 回滚到上一可用版本，问题依旧。将代码部署到云服务器测试，问题消失。排除代码问题可能。<br>接着怀疑 Fiddler 做跨域拦截时，误操作了某个配置导致 session 不被转发 / 丢弃。抛弃 Fiddler 使用 postman 直接发请求，问题依旧。排除 Fiddler 问题可能。<br>然后想起自己开的 clash 代理，也许是它把我的网络请求进行了处理导致 session 有问题，对软件的各种模式和开关进行修改，问题均没有解决。此条存疑，无法排除，考虑重装系统。<br>正打算重装系统时，忽然想到 Tomcat 作为服务器容器，也许是它的原因，简单粗暴重装 tomcat，仍有问题。然后新建一个简单的 session 打印项目，发现 sessionId 一致无误。排除 Tomcat 问题可能。<br>万念俱灰，退出各种工具准备重装系统时，nginx stop 引起我的注意，好像每个请求都经过了它，我怎么没想到。中止 nginx 后使用 localhost 域名进行测试，问题解决。问题目标锁定为 nginx。</p><h2 id="3-3-问题解决"><a href="#3-3-问题解决" class="headerlink" title="3.3 问题解决"></a>3.3 问题解决</h2><p>比对本地和云端服务器的 nginx 域名配置文件，发现本地 nginx 未对请求的 cookie 进行转发，导致 tomcat 认为是新连接，新建了 session（于是体现为 id 不一致，且）丢失登录校验信息。<br>添加 cookie 配置语句问题解决。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">proxy_cookie_path <span class="hljs-regexp">/EMM_Mall_Backend_war_exploded /</span>;<br>proxy_set_header Cookie <span class="hljs-variable">$http_cookie</span>;<br></code></pre></td></tr></table></figure><p><img src="https://blog.woohoo.top/images/Three-Problems-On-EMM_Mall-Portal-Env/SessionIdCaptureOnIDEA.png" srcset="/img/loading.gif" lazyload alt="附图：问题三"></p><hr><h1 id="四-后记"><a href="#四-后记" class="headerlink" title="四. 后记"></a>四. 后记</h1><p>其实上述三个问题都挺简单的，解决之前觉得自己遇到了不可思议的力量在阻止我学习编程 0_0，解决后觉得自己跟个 sb 一样，这么简单的问题浪费了这么多时间，害。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.woohoo.top/tags/Problems/">Problems</category>
      
      <category domain="https://blog.woohoo.top/tags/Frontend/">Frontend</category>
      
      
      <comments>https://blog.woohoo.top/2020/03/Three-Problems-On-EMM_Mall-Portal-Env/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>京东抢购助手 使用教程</title>
      <link>https://blog.woohoo.top/2020/02/JD-Assistant-Using-Manual/</link>
      <guid>https://blog.woohoo.top/2020/02/JD-Assistant-Using-Manual/</guid>
      <pubDate>Wed, 05 Feb 2020 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一-写在前面"><a href="#一-写在前面" class="headerlink" title="一. 写在前面"></a>一. 写在前面</h1><h2 id="1-1-关于京东抢购助手"><a href="#1-1-关于京东抢购助手" class="headerlink" title="1.1 关于京东抢购助手"></a>1.1 关于京东抢购助手</h2><p>京东抢购助手：包含登录，查询商品库存 / 价格，添加 / 清空购物车，抢购商品 (下单)，查询订单等功能。<br>最近特殊情况，很多人用来抢口罩。也是我接触这个项目的原因，接下来的配置也是围绕它展开的。</p><h2 id="1-2-我可以使用吗？"><a href="#1-2-我可以使用吗？" class="headerlink" title="1.2 我可以使用吗？"></a>1.2 我可以使用吗？</h2><ol><li>有编程基础的<br>直接前往<a href="https://github.com/tychxn/jd-assistant">项目地址</a>，下载后按照 wiki 配置运行即可。</li><li>没有编程基础的<br>一台电脑和足够的耐心，边看下面的教程边操作。</li></ol><hr><h1 id="二-京东抢购助手的安装"><a href="#二-京东抢购助手的安装" class="headerlink" title="二. 京东抢购助手的安装"></a>二. 京东抢购助手的安装</h1><h2 id="2-1-下载地址（二选一）"><a href="#2-1-下载地址（二选一）" class="headerlink" title="2.1 下载地址（二选一）"></a>2.1 下载地址（二选一）</h2><ol><li>点击<a href="https://github.com/tychxn/jd-assistant/archive/master.zip">这里</a>下载</li><li>从项目地址<a href="https://github.com/tychxn/jd-assistant">这里</a>下载</li></ol><h2 id="2-2-文件解压"><a href="#2-2-文件解压" class="headerlink" title="2.2 文件解压"></a>2.2 文件解压</h2><p>将下载的 zip 压缩包解压到任意非系统盘 (C:) 位置。<br>进入解压目录准备进行配置。</p><h2 id="2-3-参数配置"><a href="#2-3-参数配置" class="headerlink" title="2.3 参数配置"></a>2.3 参数配置</h2><h3 id="2-3-1-config-ini（用户数据）"><a href="#2-3-1-config-ini（用户数据）" class="headerlink" title="2.3.1 config.ini（用户数据）"></a>2.3.1 config.ini（用户数据）</h3><p>-&gt; <a href="https://github.com/tychxn/jd-assistant/wiki/3.-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98#3-eid-fp-track_id-risk_control-%E5%8F%82%E6%95%B0%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96">官方教程</a></p><p><img src="https://blog.woohoo.top/images/JD-Assistant-Using-Manual/config.jpg" srcset="/img/loading.gif" lazyload alt="config.ini配置示例图片"></p><h3 id="2-3-2-main-py（抢购函数）"><a href="#2-3-2-main-py（抢购函数）" class="headerlink" title="2.3.2 main.py（抢购函数）"></a>2.3.2 main.py（抢购函数）</h3><p>-&gt; <a href="https://github.com/tychxn/jd-assistant/wiki/1.-%E4%BA%AC%E4%B8%9C%E6%8A%A2%E8%B4%AD%E5%8A%A9%E6%89%8B%E7%94%A8%E6%B3%95#313-%E6%9C%89%E8%B4%A7%E6%8F%90%E4%BA%A4%E8%AE%A2%E5%8D%95%E7%A4%BA%E4%BE%8B">官方教程</a></p><p>这个 Main 文件，是整个程序的入口，到时候也是从这里开始运行的。<br>默认的代码里面，执行的是 JD 预约抢购的代码，而我需要的是有货就下单，于是到官方教程复制相关代码并进行替换。<br><img src="https://blog.woohoo.top/images/JD-Assistant-Using-Manual/function_change.png" srcset="/img/loading.gif" lazyload alt="main.py更换函数"></p><ol><li>main.py（抢购数据）</li><li>sku_ids：将需要抢购的商品 id 放到这里，参考教程点<a href="https://github.com/tychxn/jd-assistant/wiki/1.-%E4%BA%AC%E4%B8%9C%E6%8A%A2%E8%B4%AD%E5%8A%A9%E6%89%8B%E7%94%A8%E6%B3%95#2-%E8%8E%B7%E5%8F%96%E5%95%86%E5%93%81id%E5%B9%B6%E5%8C%BA%E5%88%86%E7%B1%BB%E5%9E%8B">这里</a></li><li>area：检查是否有库存的地区，获取代码的教程在<a href="https://github.com/tychxn/jd-assistant/wiki/3.-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98#2-%E5%9C%B0%E5%9D%80id%E5%9C%A8%E5%93%AA%E9%87%8C%E6%9F%A5%E8%AF%A2">这里</a></li><li>其他参数根据 main.py 的描述，酌情更改即可。</li></ol><hr><h1 id="三-Python-及其环境的安装"><a href="#三-Python-及其环境的安装" class="headerlink" title="三. Python 及其环境的安装"></a>三. Python 及其环境的安装</h1><h2 id="3-1-Python-安装"><a href="#3-1-Python-安装" class="headerlink" title="3.1 Python 安装"></a>3.1 Python 安装</h2><p>自行找教程安装，python2.x 或者 python3.x 都行。</p><h2 id="3-2-依赖安装"><a href="#3-2-依赖安装" class="headerlink" title="3.2 依赖安装"></a>3.2 依赖安装</h2><p>-&gt; <a href="https://github.com/tychxn/jd-assistant#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93">官方教程</a><br>直接参考官方教程，打开命令提示符（/ 终端）。<br>切换 (cd 命令) 到京东抢购助手的解压目录下，<br>输入 pip install -r requirements.txt 并回车。<br><img src="https://blog.woohoo.top/images/JD-Assistant-Using-Manual/requirements.png" srcset="/img/loading.gif" lazyload alt="依赖安装"><br>上面的示例图以 Windows10 下，Python2.7 为例，系统和版本不同可能操作略有不同。</p><hr><h1 id="四-京东抢购助手的使用"><a href="#四-京东抢购助手的使用" class="headerlink" title="四. 京东抢购助手的使用"></a>四. 京东抢购助手的使用</h1><h2 id="4-1-PyCharm-环境"><a href="#4-1-PyCharm-环境" class="headerlink" title="4.1 PyCharm 环境"></a>4.1 PyCharm 环境</h2><ol><li>下载安装 PyCharm（自行百度）</li><li>使用 PyCharm 新建工程（自行百度）</li><li>将解压（已更改配置）的所有文件复制到工程文件夹下</li><li>打开 main.py 点击绿色按钮运行<br><img src="https://blog.woohoo.top/images/JD-Assistant-Using-Manual/pycharm_running.png" srcset="/img/loading.gif" lazyload alt="PyCharm运行截图"></li></ol><h2 id="4-2-IDLE（自带）环境"><a href="#4-2-IDLE（自带）环境" class="headerlink" title="4.2 IDLE（自带）环境"></a>4.2 IDLE（自带）环境</h2><ol><li>在开始菜单 / 应用列表 打开 Python IDLE.</li><li>选择上方菜单栏 File - Open… 打开解压目录下的 main.py</li><li>选择弹出窗口上方菜单栏 Run - Run Module 运行即可<br><img src="https://blog.woohoo.top/images/JD-Assistant-Using-Manual/IDLE_running.png" srcset="/img/loading.gif" lazyload alt="IDLE运行截图"></li></ol><h2 id="4-3-终端（bash-cmd-环境"><a href="#4-3-终端（bash-cmd-环境" class="headerlink" title="4.3 终端（bash/cmd) 环境"></a>4.3 终端（bash/cmd) 环境</h2><ol><li><p>windows 下，按键盘 Win+R，输入 cmd 并回车打开命令提示符。<br>（MacOS / Linux 用户打开系统终端应用）</p></li><li><p>切换工作目录到刚才解压的项目目录下。</p></li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">D:<br><span class="hljs-keyword">cd</span> D:\WorkSpace\<span class="hljs-keyword">python</span>\jd-assistant<br><span class="hljs-keyword">python</span> main.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>（参考命令，具体换成自己的路径）</p><hr><h1 id="五-常见问题汇总"><a href="#五-常见问题汇总" class="headerlink" title="五. 常见问题汇总"></a>五. 常见问题汇总</h1><h2 id="5-1-我的电脑是-XXX-系统，能运行吗？"><a href="#5-1-我的电脑是-XXX-系统，能运行吗？" class="headerlink" title="5.1 我的电脑是 XXX 系统，能运行吗？"></a>5.1 我的电脑是 XXX 系统，能运行吗？</h2><p>只要能安装 Python 就行，包括但不限于各个版本的 Windows、MacOS 和 Linux 各发行版。</p><h2 id="5-2-Windows-命令提示符下中文乱码问题"><a href="#5-2-Windows-命令提示符下中文乱码问题" class="headerlink" title="5.2 Windows 命令提示符下中文乱码问题"></a>5.2 Windows 命令提示符下中文乱码问题</h2><p>执行 python main.py 前先执行 chcp 65001，该命令将 cmd 的编码格式改为 utf8。</p><h2 id="5-3-程序抛出-UnicodeDecodeError-异常，影响观察抢购情况"><a href="#5-3-程序抛出-UnicodeDecodeError-异常，影响观察抢购情况" class="headerlink" title="5.3 程序抛出 UnicodeDecodeError 异常，影响观察抢购情况"></a>5.3 程序抛出 UnicodeDecodeError 异常，影响观察抢购情况</h2><p>在 jd_assistant.py 文件中，添加如下语句，将输出编码改为 utf8 而不是 ascii。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import sys<br><br><span class="hljs-function"><span class="hljs-title">reload</span><span class="hljs-params">(sys)</span></span><br>sys<span class="hljs-selector-class">.setdefaultencoding</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="5-4-如何创建快捷方式一键启动脚本"><a href="#5-4-如何创建快捷方式一键启动脚本" class="headerlink" title="5.4 如何创建快捷方式一键启动脚本"></a>5.4 如何创建快捷方式一键启动脚本</h2><h3 id="5-4-1-windows"><a href="#5-4-1-windows" class="headerlink" title="5.4.1 windows"></a>5.4.1 windows</h3><p>在项目解压文件夹下，新建文本文档，将以下代码写入后保存。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">chcp <span class="hljs-number">65001</span><br><span class="hljs-keyword">python</span> main.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>重命名文件后缀为.bat 文件，双击.bat 文件即可快速启动。</p><h3 id="5-4-2-Linux-MacOS"><a href="#5-4-2-Linux-MacOS" class="headerlink" title="5.4.2 Linux/MacOS"></a>5.4.2 Linux/MacOS</h3><p>用 vim/nano 等文本编辑器新建一个.sh 文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> start.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>往里面写入以下代码后保存（python 后跟项目解压文件绝对路径）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>python ~/jd-assistant/main.py<br></code></pre></td></tr></table></figure><p>下次在 start.sh 所在文件夹输入./start.sh 即可启动。<br>有特殊需要的通过 ln 创建快捷方式或者加入 PATH，写个.desktop 等的自行百度学习。</p><h2 id="5-5-去哪里获取在售口罩的-sku-ids？"><a href="#5-5-去哪里获取在售口罩的-sku-ids？" class="headerlink" title="5.5 去哪里获取在售口罩的 sku_ids？"></a>5.5 去哪里获取在售口罩的 sku_ids？</h2><p><a href="https://blog.woohoo.top/files/jd-assistant_facemask_sku_ids.txt">这里</a>有一份从 tg 群中拿到的 ids，具体商品未知，可自行确认和使用。</p><h1 id="六-其它问题"><a href="#六-其它问题" class="headerlink" title="六. 其它问题"></a>六. 其它问题</h1><p>如果有错误还望见谅并指出，再次感谢项目作者：<a href="https://github.com/tychxn">Tychxn</a></p>]]></content:encoded>
      
      
      
      <category domain="https://blog.woohoo.top/tags/Tutorials/">Tutorials</category>
      
      <category domain="https://blog.woohoo.top/tags/Life/">Life</category>
      
      
      <comments>https://blog.woohoo.top/2020/02/JD-Assistant-Using-Manual/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>用 Hexo 在 Github 搭建博客</title>
      <link>https://blog.woohoo.top/2018/03/Build-github-Blog-with-hexo/</link>
      <guid>https://blog.woohoo.top/2018/03/Build-github-Blog-with-hexo/</guid>
      <pubDate>Thu, 22 Mar 2018 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一-博客？Hexo？Github？"><a href="#一-博客？Hexo？Github？" class="headerlink" title="一. 博客？Hexo？Github？"></a>一. 博客？Hexo？Github？</h1><h2 id="1-1-你为什么需要一个博客"><a href="#1-1-你为什么需要一个博客" class="headerlink" title="1.1 你为什么需要一个博客"></a>1.1 <a href="http://taowusheng.cn/2016/10/03/20161003%20%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2">你为什么需要一个博客</a></h2><h2 id="1-2-为什么用-Hexo"><a href="#1-2-为什么用-Hexo" class="headerlink" title="1.2 为什么用 Hexo"></a>1.2 为什么用 Hexo</h2><p>博客的所有内容全部生成静态文件（HTML+CSS+JS），不仅对服务器负载小，而且速度快。<br>拥有大量的优质主题和拓展插件，官方提供国际化支持（包含中文支持），可以绑定域名。</p><h2 id="1-3-为什么搭建在-github"><a href="#1-3-为什么搭建在-github" class="headerlink" title="1.3 为什么搭建在 github"></a>1.3 为什么搭建在 github</h2><p>因为免费，因为免费，因为免费。（重要的事情说三遍）<br>而且省去申请 &amp; 管理网络空间、备案等一系列复杂的事情。<br>比起博客平台提供商，无广告，高度自由化简直不能再棒。</p><h1 id="二-hexo-的本地搭建"><a href="#二-hexo-的本地搭建" class="headerlink" title="二. hexo 的本地搭建"></a>二. hexo 的本地搭建</h1><p>推荐方式：<a href="https://hexo.io/zh-cn/docs/">查看官方文档</a></p><ol><li>安装 <a href="https://nodejs.org/en/download/current/">Node.js</a></li><li>安装 <a href="https://git-scm.com/downloads">Git</a></li><li>运行 Git bash 或其他命令行终端</li><li>执行下列命令安装hexo及其依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;*博客的目标文件夹*&quot;</span><br>npm install -g hexo-cli<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure><ol start="5"><li>安装 github 部署插件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h1 id="三-创建-github-博客"><a href="#三-创建-github-博客" class="headerlink" title="三. 创建 github 博客"></a>三. 创建 github 博客</h1><p>配置用户名邮箱，生成 SSH 秘钥并绑定。参考以下教程：<br><a href="https://blog.csdn.net/liuwengai/article/details/52072344">https://blog.csdn.net/liuwengai/article/details/52072344</a><br>在 github 官网新建仓库，仓库名为 “用户名.github.io”。<br>这样子，就创建了一个 github 博客，网址为仓库名（用户名.github.io）。</p><p>接着修改博客根目录下的_config.yml 中的 deploy（默认在文档尾部）项：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:你的github用户名/你的github用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>这样你才能使用 hexo 上传你的博客到 github 上。</p><h1 id="四-hexo-的使用"><a href="#四-hexo-的使用" class="headerlink" title="四. hexo 的使用"></a>四. hexo 的使用</h1><h2 id="4-1-创作文章"><a href="#4-1-创作文章" class="headerlink" title="4.1 创作文章"></a>4.1 创作文章</h2><p>使用命令新建文章：<br>hexo new post 文章名称</p><p>该命令会在 hexo 根目录的<br>source 文件夹_post 子文件夹中<br>新建一个后缀名为.md 的文本文件。<br>用文本编辑器打开该文件即可创作文章。</p><h2 id="4-2-日常维护"><a href="#4-2-日常维护" class="headerlink" title="4.2 日常维护"></a>4.2 日常维护</h2><p>hexo g ： 将编辑好的文章生成博客网页<br>hexo s ： 启动本地 hexo 博客服务器<br>（启动后可用浏览器通过 localhost:4000 访问）<br>hexo d ： 将生成好的博客网页同步到 github<br>hexo clean ： 清除所有生成好的博客网页</p><h2 id="4-3-个性设置"><a href="#4-3-个性设置" class="headerlink" title="4.3 个性设置"></a>4.3 个性设置</h2><p>博客根目录下的_config.yml 文件为配置文件，可进行自定义修改。<br>包括网站名称，副标题，作者信息，使用的主题等，<br>具体查看文件注释和善用翻译工具。</p><h2 id="4-4-高级功能"><a href="#4-4-高级功能" class="headerlink" title="4.4 高级功能"></a>4.4 高级功能</h2><h3 id="4-4-1-创建新的页面"><a href="#4-4-1-创建新的页面" class="headerlink" title="4.4.1 创建新的页面"></a>4.4.1 创建新的页面</h3><p>命令 hexo new page 页面名称<br>可以为你的博客创建一个新的页面<br>该命令在 source 文件夹下新建子文件夹并在其中生成 index.md 文件。<br>可以用 markdown 语法甚至 html 标签编辑它来创建你的网页。<br>当然别忘了给他一个超链接以使你能够访问到它。</p><h3 id="4-4-2-本地搜索功能"><a href="#4-4-2-本地搜索功能" class="headerlink" title="4.4.2 本地搜索功能"></a>4.4.2 本地搜索功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-search --save<br>npm install hexo-generator-searchdb --save<br>hexo new page search<br></code></pre></td></tr></table></figure><p>编辑博客根目录下的 source/search/index.md 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Search</span><br><span class="hljs-attr">search:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="4-4-3-RSS订阅功能"><a href="#4-4-3-RSS订阅功能" class="headerlink" title="4.4.3 RSS订阅功能"></a>4.4.3 RSS订阅功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-feed --save<br></code></pre></td></tr></table></figure><h1 id="五-开始写作"><a href="#五-开始写作" class="headerlink" title="五. 开始写作"></a>五. 开始写作</h1><h2 id="5-1-选择一款编辑器"><a href="#5-1-选择一款编辑器" class="headerlink" title="5.1 选择一款编辑器"></a>5.1 选择一款编辑器</h2><p>工欲善其事，必先利其器。<br>拥有一个好的文本编辑器将让你的文章创作如虎添翼。<br>推荐 sublime text，notepad++ 这类功能强大、界面美观的文本编辑器，<br>重要的是他们还支持 markdown 语法高亮。</p><h2 id="5-2-Markdown-语法"><a href="#5-2-Markdown-语法" class="headerlink" title="5.2 Markdown 语法"></a>5.2 Markdown 语法</h2><p>hexo 的文章文件.md 意味着支持 markdown 语法，<br>使用 markdown 语法能实现排版等更多高级功能，<br>让你的文章不再是只有干巴巴的文字，语法教程链接：<br><a href="https://www.appinn.com/markdown/">https://www.appinn.com/markdown/</a></p>]]></content:encoded>
      
      
      
      <category domain="https://blog.woohoo.top/tags/Tutorials/">Tutorials</category>
      
      <category domain="https://blog.woohoo.top/tags/Github/">Github</category>
      
      
      <comments>https://blog.woohoo.top/2018/03/Build-github-Blog-with-hexo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>用 VirtualBox 安装 CentOS</title>
      <link>https://blog.woohoo.top/2018/02/Install-CentOS-on-VirtualBox/</link>
      <guid>https://blog.woohoo.top/2018/02/Install-CentOS-on-VirtualBox/</guid>
      <pubDate>Thu, 08 Feb 2018 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="零-前言"><a href="#零-前言" class="headerlink" title="零. 前言"></a>零. 前言</h1><p>因为专业原因，<a href="https://baike.baidu.com/item/linux/27050?fr=aladdin">Linux</a> 似乎是不得不学的一个 Operating System。</p><p>所以选择了 Linux 的一个发行版 <a href="https://baike.baidu.com/item/centos">CentOS</a> 来学习使用。</p><p>又想到了昨天刚在 github 搭了博客，那就写成博文吧哈哈哈。</p><p>（P.S. 其实对于新手的话，感觉 <a href="https://baike.baidu.com/item/ubuntu">Ubuntu</a> 会好看和好用多了）</p><h1 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一. 准备工作"></a>一. 准备工作</h1><h2 id="1-1-下载-CentOS-镜像"><a href="#1-1-下载-CentOS-镜像" class="headerlink" title="1.1 下载 CentOS 镜像"></a>1.1 下载 CentOS 镜像</h2><p>前往官网 <a href="http://centos.org/">centos.org</a> 下载 CentOS 的镜像文件（即系统安装包，如果你喜欢这么称呼它）</p><p>好吧，官网是英文的，如果你这点英语都看不懂的话…… 还怎么使用 Linux 和 Coding ？</p><p>别别别，别打我，我一步一步说还不行吗…… 首先打开官网是下面这个样子：</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_001.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_001"></p><p>点击 Get CentOS Now （马上获取 CentOS），进入选择下载界面：</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_002.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_002"></p><p>默认是下载最新 64 位版本的 ISO 文件，目前最新版本是 CentOS 7 （1708）。</p><p>上图中可以看到下载的类型分为 DVD ISO / Everything ISO / Minimal ISO 三种。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c">DVD ISO ：<br>适用于刻录进DVD光盘（Max：<span class="hljs-number">4.7</span>G）的镜像文件，其中包括了系统必要和常用的文件<span class="hljs-meta">&amp;软件。</span><br><br>Everything ISO ：<br>包含该系统安装时可能用用到的所有文件<span class="hljs-meta">&amp;软件，但文件较大。</span><br>（目前大小是<span class="hljs-number">8.09</span>G，也就是打算刻录进U盘的话，<span class="hljs-number">8</span>G的U盘会不够哦）<br><br>Minimal ISO ：<br>仅该系统安装时必要的最少量文件<span class="hljs-meta">&amp;软件。</span><br></code></pre></td></tr></table></figure><p>选择好自己需要的类型后，点击对应按钮，会进入镜像源选择界面，在上方的列表里随便选一个下载即可。</p><p>（镜像源：镜像文件的来源，一般由第三方机构服务器负责储存并提供下载，例如网易、搜狐、清华大学。我所在的 <em>华南农业大学珠江学院 网络工作室</em> 据说接下来也将部署一个镜像服务器）</p><h2 id="1-2-下载安装-VirtualBox"><a href="#1-2-下载安装-VirtualBox" class="headerlink" title="1.2 下载安装 VirtualBox"></a>1.2 下载安装 <a href="https://baike.baidu.com/item/VirtualBox">VirtualBox</a></h2><p>同样的，前往官网的<a href="https://www.virtualbox.org/wiki/Downloads">下载页面</a> ：</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_003.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_003"></p><p>好烦，又是英文的，总之选择 Windows hosts 就是了，即下载 Windows 作为宿主机的软件版本。（简单来说就是下载 exe）</p><p>这个软件安装呢，没有什么需要注意的地方，一路跟着引导就是了。（才不是因为我要偷懒呢～）</p><h2 id="1-3-新建虚拟机"><a href="#1-3-新建虚拟机" class="headerlink" title="1.3 新建虚拟机"></a>1.3 新建<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA/104440?fr=aladdin">虚拟机</a></h2><p>打开 VirtualBox，点击左上角的新建，填写虚拟机名称，随便起一个名字。</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_004.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_004"></p><p>有趣的是，如果 VirtualBox 识别到名字里有操作系统的名称，会自动识别并帮你选好下面两个选项，如果没有的话，请手动设置成 Linux（Red Hat 64bit）。</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">为什么是Red Hat <span class="hljs-number">64</span>bit 而不是 CentOS <span class="hljs-number">64</span>bit，完全可以把CentOS理解为RedHat AS系列!它完全就是对RedHat AS进行改进后发布的!各种操作、使用和RedHat没有区别!只是Red Hat是收费的，而CentOS是免费的。<br></code></pre></td></tr></table></figure><p>接下来，基本上一路按照引导点下一步就行了。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">主要是对虚拟机硬件条件进行一些配置，包括内存和硬盘。更多<span class="hljs-meta">CPU</span>、光盘、网络之类的设置可以在新建虚拟机后通过“新建”旁边的“设置”按钮进行配置。具体的设置根据系统需求和源计算机本身的硬件条件为基础。<br>其中注意三个点：<br><br><span class="hljs-number">1</span>.如果运行无图形界面的CentOS，内存默认1024M肯定够了，如果要运行图形界面或作为服务器，可根据需求进行调整。<br><span class="hljs-number">2</span>.在配置硬盘容量的时候，并不会占用实际容量，你设置的只是一个额度，具体占用到本机硬盘容量的是虚拟机内已使用的硬盘容量。所以无需担心占用过高的硬盘空间。另外，默认虚拟硬盘文件会放在C盘，在新建虚拟机时，可以在调整容量界面选择虚拟硬盘存放位置，放到容量比较充裕的磁盘分区下。<br><span class="hljs-number">3</span>.并不是配置设置得越高越好，因为实际上你是分出了真实的内存、<span class="hljs-meta">CPU</span>等来供虚拟机使用的，要考虑除虚拟机外，原本系统和软件所需要的硬件配置是否够用。虚拟机的配置可在虚拟机关机后进行调整，所以也无需担心设置的参数不合适怎么办。<br></code></pre></td></tr></table></figure><h1 id="二-安装系统"><a href="#二-安装系统" class="headerlink" title="二. 安装系统"></a>二. 安装系统</h1><h2 id="2-1-进入安装界面"><a href="#2-1-进入安装界面" class="headerlink" title="2.1 进入安装界面"></a>2.1 进入安装界面</h2><p>打开 VirtualBox，在左侧虚拟机目录里选择你刚才创建的虚拟机，点击左上角 “新建” 旁边的 “设置”。</p><p>选择 “存储”-“没有盘片”- 点击右边的光盘按钮 -“选择一个虚拟光盘文件…”，然后选择在 1.1 步骤里下载的 iso 文件（系统镜像）</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_005.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_005"></p><p>点击 “OK” 确认，并点击上方导航栏的 “启动” 按钮。</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_006.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_006"></p><p>（虚拟机运行期间，会自动捕获你的鼠标，你的鼠标将只能在虚拟机内使用，此时按下键盘的右侧 ctrl 键可以取消本次捕获）</p><p>虚拟机启动，进入安装界面：</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_007.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_007"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">你们要的翻译：<br><span class="hljs-bullet">1.</span> 开始安装CentOS 7<br><span class="hljs-bullet">2.</span> 测试光盘并安装CentOS 7<br><span class="hljs-bullet">3.</span> 故障排除<br>（如果60秒内没有操作，将自动进入第二项）<br></code></pre></td></tr></table></figure><p>选择第二项（其实选择第一项也行，跳过盘片检查）开始检查光盘内容后进入安装界面：</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_008.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_008"></p><p>嘿，兄 dei，选择语言界面，你懂的，拉到最下面选择中文，终于有中文了嘤嘤嘤。</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_009.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_009"></p><p>选好中文点击 “继续”，出现系统配置界面，乍一看有点多，其实很多不用你设置，just take it easy。</p><p>你所必需设置的只有安装位置，推荐设置的有 “软件选择” 及 “网络和主机名”。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">“网络和主机名”：在虚拟机里，默认是配置好桥接网络了，你只需要进入该设置并打开以太网就行了。<br>“软件选择”：如果你下载的是DVD或者Everything类型的镜像文件，那么你可以根据需要选择要安装的软件包。<br></code></pre></td></tr></table></figure><h2 id="2-2-设置安装位置"><a href="#2-2-设置安装位置" class="headerlink" title="2.2 设置安装位置"></a>2.2 设置安装位置</h2><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_010.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_010"></p><p>其实你完全可以选择 “自动配置分区”，但是为了让大家进一步了解 Linux，这次我们用手动。</p><p>选择我要配置分区，然后左上角完成，进入配置界面。</p><p>你可以选择左侧的 “点这里自动创建他们”，或者</p><p>点击左下角的添加按钮，会看到我们需要设置挂载点和需要容量两个选项。</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_011.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_011"></p><p>关于挂载点的含义，可以参考<a href="http://blog.csdn.net/yj_fq/article/details/44259427">这里</a></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">一般设置至少三个分区： <br>一个挂载到<span class="hljs-keyword">swap</span>，容量是内存容量的两倍。<br>一个挂载到/boot，容量最少<span class="hljs-number">100</span>M，默认<span class="hljs-number">1024</span>M<br>一个挂载到/，容量随便，一般为剩下的所有容量。<br></code></pre></td></tr></table></figure><p>（挂载到 / 意味着除了 boot 引导文件，其他文件都会存在这里。是你能用的 “整个硬盘空间”。）</p><p>所有采用 Linux 内核的操作系统，分区都可参考以上，所以特意拿出来介绍。</p><p>如果想更深入了解 Linux 的知识，推荐购买《鳥哥的 Linux 私房菜》丛书或者访问他们的<a href="http://linux.vbird.org/">官网</a>免费阅读教材</p><h2 id="2-3-创建系统用户"><a href="#2-3-创建系统用户" class="headerlink" title="2.3 创建系统用户"></a>2.3 创建系统用户</h2><p>确定好分区后点击完成回到安装配置界面，就可以点击右下角开始安装了。</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_012.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_012"></p><p>现在，CentOS 已经开始安装了，与此同时，你需要设置 Root 密码和用户的用户名和密码。</p><p>是的，CentOS 是支持多用户的操作系统，其中 root 用户相当于 windows 下的 administrator，是最高权限拥有者（系统管理员）。</p><p>通常情况下我们不会以 root 账户登录系统，因为权限太高，一不小心把系统文件搞坏了就麻烦了。所以我们还要创建一个新用户。</p><p>创建流程就不介绍了，点进去填写用户信息就行了。（用户均为本地用户，不需要联网注册）</p><p>配置完成、安装完成后，按要求重启便可以体验到 CentOS 系统了！</p><h1 id="三-初次使用配置"><a href="#三-初次使用配置" class="headerlink" title="三. 初次使用配置"></a>三. 初次使用配置</h1><p>不存在的，教程到此结束，因为你已经成功地安装好了 CentOS。没我的事了 2333</p><p>如果你想在 Linux 下编程、搭建服务器等，请参考相关的教程进行环境搭建即可。</p><h2 id="3-1-安装完成重启后是黑框"><a href="#3-1-安装完成重启后是黑框" class="headerlink" title="3.1 安装完成重启后是黑框"></a>3.1 安装完成重启后是黑框</h2><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_013.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_013"></p><p>如果你安装重启后，是这样的界面，别担心…… 你估计是安装了 minimal 版本，最精简的系统包，还记得吗？</p><p>所以呢，它是不具备着图形界面的，没有图形界面的系统占用资源更少，执行效率更高，莫名其妙的问题更少，也算是 Linux 的一种精髓所在。</p><p>通常情况下，服务器的系统都不会安装图形界面，以确保效率和稳定性。屁话扯了这么多，所以你的系统怎么办？</p><p>其实现在你已经在登陆界面了，试着敲敲你的键盘，嗯，没错，输入你的用户名，回车。</p><p>接下来，输入你的密码，欸？没反应吗？别方，其实是出于安全考虑，没有显示出来而已，尽管输入后回车。</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_014.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_014"></p><p>像这样，就成功登陆了，接下来可以执行各种操作指令了，如果你不会的话，Emmm，可以找 Linux 的使用教程来学习。</p><p><img src="https://blog.woohoo.top/images/Install-CentOS-on-VirtualBox/Install-CentOS-on-VirtualBox_015.jpg" srcset="/img/loading.gif" lazyload alt="Install-CentOS-on-VirtualBox_015"></p><p>如果是这个样子，说明用户名或者密码错误，再试一次吧～</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.woohoo.top/tags/Tutorials/">Tutorials</category>
      
      <category domain="https://blog.woohoo.top/tags/System/">System</category>
      
      
      <comments>https://blog.woohoo.top/2018/02/Install-CentOS-on-VirtualBox/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
